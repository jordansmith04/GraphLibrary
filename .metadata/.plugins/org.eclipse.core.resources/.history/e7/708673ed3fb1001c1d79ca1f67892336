
package com.Jordan.GraphLibrary;

import java.util.ArrayDeque;
import java.util.Optional;
import java.util.Queue;

public class Search {

}
/*
public class Node<T> {
    private T value;
    private Set<Node<T>> neighbors;

    public Node(T value) {
        this.value = value;
        this.neighbors = new HashSet<>();
    }

    public void connect(Node<T> node) {
        if (this == node) throw new IllegalArgumentException("Can't connect node to itself");
        this.neighbors.add(node);
        node.neighbors.add(this);
    }
}

public static <T> Optional<Node<T>> search(T value, Node<T> start) {
    Queue<Node<T>> queue = new ArrayDeque<>();
    queue.add(start);

    Node<T> currentNode;

    while (!queue.isEmpty()) {
        currentNode = queue.remove();

        if (currentNode.getValue().equals(value)) {
            return Optional.of(currentNode);
        } else {
            queue.addAll(currentNode.getNeighbors());
        }
    }

    return Optional.empty();
}

//update above to eliminate loops
while (!queue.isEmpty()) {
    currentNode = queue.remove();
    LOGGER.debug("Visited node with value: {}", currentNode.getValue());

    if (currentNode.getValue().equals(value)) {
        return Optional.of(currentNode);
    } else {
        alreadyVisited.add(currentNode);
        queue.addAll(currentNode.getNeighbors());
        queue.removeAll(alreadyVisited);
    }
}

return Optional.empty();
*/

public void printAllPaths(int s, int d)
{
    boolean[] isVisited = new boolean[v];
    ArrayList<Vertex> pathList = new ArrayList<>();

    // add source to path[]
    pathList.add(s);

    // Call recursive utility
    printAllPathsUtil(s, d, isVisited, pathList);
}

// A recursive function to print
// all paths from 'u' to 'd'.
// isVisited[] keeps track of
// vertices in current path.
// localPathList<> stores actual
// vertices in the current path
private void printAllPathsUtil(Integer u, Integer d,
                               boolean[] isVisited,
                               List<Integer> localPathList)
{

    if (u.equals(d)) {
        System.out.println(localPathList);
        // if match found then no need to traverse more till depth
        return;
    }

    // Mark the current node
    isVisited[u] = true;

    // Recur for all the vertices
    // adjacent to current vertex
    for (Integer i : adjList[u]) {
        if (!isVisited[i]) {
            // store current node
            // in path[]
            localPathList.add(i);
            printAllPathsUtil(i, d, isVisited, localPathList);

            // remove current node
            // in path[]
            localPathList.remove(i);
        }
    }

    // Mark the current node
    isVisited[u] = false;
}