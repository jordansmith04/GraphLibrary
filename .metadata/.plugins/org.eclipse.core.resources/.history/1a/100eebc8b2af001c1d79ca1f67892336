package com.Jordan.GraphLibrary;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ThreadLocalRandom;

public class App 
{
	public static Graph graphy = new Graph();
	
	public static void performOneDirectionalManipulationOnGraph() {
		
		//Create new / get adjacency list map
		Map<Vertex, List<Vertex>> adjacencyList = graphy.getAdjacencyLists();
		
		//Insert some vertices
		String[] names = {"Fred", "Wilmer", "Charlie", "Vanessa", "Bart"};
		int counter = 0;
		for(String name : names) {
			graphy.setAdjacencyLists(graphy.addVertex(graphy.getAdjacencyLists(), new Vertex(counter, name)));
			counter += 1;
		}
		
		//insert some edges
		Set<Vertex>  adjacencyListSet = adjacencyList.keySet();
		Vertex[] vertices = new Vertex[adjacencyListSet.size()];
		counter = 0;
		for(Vertex v : adjacencyListSet) {
			vertices[counter] = v;
			counter += 1;
		}
		for(int i = 0; i < 6; i++) {
			int[] randoms = generateTwoRandomNumbers(0, adjacencyListSet.size());
			graphy.setAdjacencyLists(graphy.addEdge(adjacencyList, vertices[randoms[0]], vertices[randoms[1]], false));
		}
		
		//Printing graph structure
		System.out.println(graphy.toString(graphy.getAdjacencyLists()));
		
		//Print path between two vertices
		int[] randoms = generateTwoRandomNumbers(0, adjacencyListSet.size());
		System.out.println(graphy.getPath(adjacencyList, vertices[randoms[0]], vertices[randoms[1]], false));
	}
	
	public static int[] generateTwoRandomNumbers(int min, int max){
		int[] randoms = new int[2];
		int randomNum1 = ThreadLocalRandom.current().nextInt(min, max);
		int randomNum2 = ThreadLocalRandom.current().nextInt(min, max);
		while(randomNum1 == randomNum2)
			randomNum2 = ThreadLocalRandom.current().nextInt(min, max);
		randoms[0] = randomNum1;
		randoms[1] = randomNum2;
		return randoms;
	}
	
	
	
    public static void main( String[] args )
    {
        performOneDirectionalManipulationOnGraph();
    }
}
