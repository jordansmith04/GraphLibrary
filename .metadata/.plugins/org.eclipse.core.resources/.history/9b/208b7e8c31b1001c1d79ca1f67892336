package com.Jordan.GraphLibrary;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Queue;
import java.util.Set;
import java.util.logging.Logger;

public class Graph implements GraphInterface<Vertex> {

	private List<Vertex> adjacencyLists;

	public List<Vertex> addEdge(List<Vertex> lists, Vertex source, Vertex destination, boolean bidirectional) {
		if (!lists.contains(source))
			addVertex(lists, source);

		if (!lists.contains(destination))
			addVertex(lists, destination);

		Set<Vertex> sourceNeighborVertices = source.getNeighborVertices();
		sourceNeighborVertices.add(destination);
		source.setNeighborVertices(sourceNeighborVertices);

		if (bidirectional == true) {
			Set<Vertex> destNeighborVertices = destination.getNeighborVertices();
			destNeighborVertices.add(destination);
			destination.setNeighborVertices(destNeighborVertices);
		}
		return lists;
	}

	public List<Vertex> addVertex(List<Vertex> lists, Vertex v) {
		lists.add(v);
		return lists;
	}

	public List<String> search(Vertex start, Vertex end) {
		Set<Vertex> alreadyVisited = new HashSet<>();
		Queue<Vertex> queue = new ArrayDeque<>();
		List<String> vertexNameList = new ArrayList<String>();
		queue.add(start);

		Vertex currentVertex;

		while (!queue.isEmpty()) {
		    currentVertex = queue.remove();
		    vertexNameList.add(currentVertex.getName());
		    //Logger.debug("Visited node with value: {}", currentVertex.getValue());

		    if (currentVertex.equals(end)) {
		        return vertexNameList;
		    } else {
		        alreadyVisited.add(currentVertex);
		        queue.addAll(currentVertex.getNeighborVertices());
		        queue.removeAll(alreadyVisited);
		    }
		}
		
		//vertexNameList.add("There were no connections from Vertex with name: " + start.getName() + " to Vertex with value: " + end.getName());
		return vertexNameList;
	}

	public Graph() {
		super();
		this.adjacencyLists = new ArrayList<Vertex>();
	}

	public Graph(List<Vertex> adjacencyLists) {
		super();
		this.adjacencyLists = adjacencyLists;
	}

	public List<Vertex> getAdjacencyLists() {
		return adjacencyLists;
	}

	public void setAdjacencyLists(List<Vertex> adjacencyLists) {
		this.adjacencyLists = adjacencyLists;
	}

	public String toString(List<Vertex> list) {
		StringBuilder builder = new StringBuilder();

		for (Vertex v : list) {
			builder.append(v.toString() + ": ");
			builder.append("\n");
		}

		return builder.toString();
	}

}