package com.Jordan.GraphLibrary;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.Set;

public class Graph implements GraphInterface<Vertex> {

	private List<Vertex> adjacencyLists;
	public List<List<Vertex>> allPaths;

	public List<Vertex> addEdge(List<Vertex> lists, Vertex source, Vertex destination, boolean bidirectional) {
		if (!lists.contains(source))
			addVertex(lists, source);

		if (!lists.contains(destination))
			addVertex(lists, destination);

		Set<Vertex> sourceNeighborVertices = source.getNeighborVertices();
		sourceNeighborVertices.add(destination);
		source.setNeighborVertices(sourceNeighborVertices);

		if (bidirectional == true) {
			Set<Vertex> destNeighborVertices = destination.getNeighborVertices();
			destNeighborVertices.add(destination);
			destination.setNeighborVertices(destNeighborVertices);
		}
		return lists;
	}

	public List<Vertex> addVertex(List<Vertex> lists, Vertex v) {
		lists.add(v);
		return lists;
	}

	public List<List<Vertex>> printAllPaths(List<Vertex> vertices, Vertex start, Vertex end)
	{
	    boolean[] isVisited = new boolean[vertices.size()];
	   List<Vertex> pathList = new ArrayList<>();

	    // add source to path[]
	    pathList.add(start);

	    // Call recursive utility
	    getAllPathsUtil(vertices, start, end, isVisited, pathList);
	    
	    System.out.println(getAllPaths());
	    return getAllPaths();
	}

	// A recursive function to print
	// all paths from 'start' to 'end'.
	// isVisited[] keeps track of
	// vertices in current path.
	// localPathList<> stores actual
	// vertices in the current path
	private void getAllPathsUtil(List<Vertex> vertices, Vertex start, Vertex end, boolean[] isVisited, List<Vertex> localPathList)
	{
		if(start.equals(end)) {
			//System.out.println(localPathList);
			System.out.println(localPathList);
			allPaths.add(new ArrayList<Vertex>(localPathList));
			return;
		} 
	    // Mark the current node
	    isVisited[start.getValue()] = true;

	    // Recur for all the vertices
	    // adjacent to current vertex
	    for (Vertex v : start.getNeighborVertices()) {
	        if (!isVisited[v.getValue()]) {
	            // store current node
	            // in path[]
	            localPathList.add(v);
	            getAllPathsUtil(vertices, v, end, isVisited, localPathList);

	            // remove current node
	            // in path[]
	            localPathList.remove(v);
	        }
	    }

	    // Mark the current node
	    isVisited[start.getValue()] = false;
	}
	
	
	public Graph() {
		super();
		this.adjacencyLists = new ArrayList<Vertex>();
		this.allPaths = new ArrayList<>();
	}

	public Graph(List<Vertex> adjacencyLists, List<List<Vertex>> allPaths) {
		super();
		this.adjacencyLists = adjacencyLists;
		this.allPaths = allPaths;
	}

	public List<Vertex> getAdjacencyLists() {
		return adjacencyLists;
	}

	public void setAdjacencyLists(List<Vertex> adjacencyLists) {
		this.adjacencyLists = adjacencyLists;
	}

	
	public List<List<Vertex>> getAllPaths() {
		return allPaths;
	}

	public void setAllPaths(List<List<Vertex>> allPaths) {
		this.allPaths = allPaths;
	}

	public void addVertexToPath(List<Vertex> v) {
		this.allPaths.add(v);
	}

	public String toString(List<Vertex> list) {
		StringBuilder builder = new StringBuilder();

		for (Vertex v : list) {
			builder.append(v.toString() + ": ");
			builder.append("\n");
		}

		return builder.toString();
	}

}